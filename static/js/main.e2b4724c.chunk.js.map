{"version":3,"sources":["Components/SearchBox/SearchBox.tsx","Components/Card/Card.tsx","Components/CardList/CardList.tsx","Components/Scroll/Scroll.tsx","Containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","style","fontSize","CardList","robots","map","user","key","Scroll","props","overflowY","border","height","children","App","state","searchField","onSearchChange","event","newValue","target","value","setState","filteredArray","filter","robot","toLowerCase","includes","fetch","then","response","json","users","this","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAmBeA,G,MAbG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,aACnB,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,gCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCOHK,EAZ6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvD,OACE,yBAAKP,UAAU,uDACb,yBAAKQ,IAAI,YAAYC,IAAG,+BAA0BJ,EAA1B,mBACxB,6BACE,wBAAIK,MAAO,CAAEC,SAAU,SAAWL,GAClC,2BAAIC,MCOGK,EAjBE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAClB,OACE,6BACGA,EAAOC,KAAI,SAAAC,GACV,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKV,GACVA,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCOTU,EAdA,SAACC,GACd,OACE,yBACER,MAAO,CACLS,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTH,EAAMI,WC0CEC,E,4MArCbC,MAAQ,CACNX,OAAQ,GACRY,YAAa,I,EAGfC,eAAiB,SAACC,GAChB,IAAMC,EAAWD,EAAME,OAAOC,MAC9B,EAAKC,SAAS,CAAEN,YAAaG,K,EAG/BI,cAAgB,WAAO,IAAD,EACY,EAAKR,MAA7BX,EADY,EACZA,OAAQY,EADI,EACJA,YAChB,OAAOZ,EAAOoB,QAAO,SAACC,GACpB,OAAOA,EAAM5B,KAAK6B,cAAcC,SAASX,EAAYU,mB,kEAG9B,IAAD,OACxBE,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAElB,OAAQ4B,S,+BAIzC,OAAQC,KAAKlB,MAAMX,OAAO8B,OAGxB,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAc2C,KAAKhB,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUb,OAAQ6B,KAAKV,oBAN3B,8C,GAzBYY,IAAMC,WCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e2b4724c.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface ISearchChangeProps {\n  searchChange(event: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({ searchChange }: ISearchChangeProps) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\ninterface ICardStatelessProps {\n  name: string;\n  email: string;\n  id: number;\n}\n\nconst Card: React.FC<ICardStatelessProps> = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"roboimage\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2 style={{ fontSize: \"15px\" }}>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport { IRobots } from \"../../Containers/App\";\n\nconst CardList = ({ robots }: { robots: Array<IRobots> }) => {\n  return (\n    <div>\n      {robots.map(user => {\n        return (\n          <Card\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\ntype Props = {\n  children?: JSX.Element;\n};\n\nconst Scroll = (props: Props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"../Components/SearchBox/SearchBox\";\nimport CardList from \"../Components/CardList/CardList\";\nimport Scroll from \"../Components/Scroll/Scroll\";\n\nexport interface IRobots {\n  name: string;\n  email: string;\n  id: number;\n}\n\ninterface IAppProps {}\n\ninterface IAppState {\n  robots: Array<IRobots>;\n  searchField: string;\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n  state = {\n    robots: [],\n    searchField: \"\"\n  };\n\n  onSearchChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const newValue = event.target.value;\n    this.setState({ searchField: newValue });\n  };\n\n  filteredArray = () => {\n    const { robots, searchField } = this.state;\n    return robots.filter((robot: IRobots) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n  };\n  componentDidMount(): void {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  render(): JSX.Element {\n    return !this.state.robots.length ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={this.filteredArray()} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}